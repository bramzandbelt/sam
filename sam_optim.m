function sam_optim(SAM)
% Optimizes stochastic accumulator model to account for observations
%  
% DESCRIPTION 
% <Describe more extensively what this function does> 
%  
% SYNTAX 
% SAM_OPTIM; 
%  
% EXAMPLES 
%  
%  
% REFERENCES 
%  
% ......................................................................... 
% Bram Zandbelt, bramzandbelt@gmail.com 
% $Created : Sat 21 Sep 2013 12:53:48 CDT by bram 
% $Modified: Sat 21 Sep 2013 19:40:18 CDT by bram

 
% CONTENTS 
% 1.PROCESS INPUTS AND SPECIFY VARIABLES 
%   1.1.Process inputs
%   1.2. Pre-allocate empty arrays
% 2.SPECIFY PRECURSOR AND PARAMETER-INDEPENDENT MODEL MATRICES
% 3.CHARACTERIZE OBSERVED DATA
%   3.1. Organize observations
%   3.2. Compute response time bin statistics
% 4.OPTIMIZE MODEL
%   4.1.Seed the random number generator
%   4.2.

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% 1. PROCESS INPUTS AND SPECIFY VARIABLES
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
 
% 1.1. Process inputs
% ========================================================================= 

% Lower bounds
LB          = SAM.optim.LB;
    
% Upper bounds
UB          = SAM.optim.UB;
        
% Cost function 
costFun     = SAM.optim.costFun;

% Cumulative probabilities for which to compute quantiles
cumProb     = SAM.optim.cumProb;

% Minimum bin size (in number of trials per bin)
minBinSize  = SAM.optim.minBinSize;

% 1.2. Pre-allocate empty arrays
% ========================================================================= 

% Structure for logging predicted trial probabilities and response times
prdOptimData  = struct('P',[],...
                       'rt',[]);

% Structure for logging data for optimization
obsOptimData  = struct('rt',[],...
                       'N',[],...
                       'P',[],...
                       'rtQ',[],...
                       'f',[],...
                       'pM',[]);

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% 2. SPECIFY PRECURSOR AND PARAMETER-INDEPENDENT MODEL MATRICES
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

% Specify precursor and parameter-independent model matrices
[VCor,VIncor,S,terminate,blockInput,latInhib] = sam_spec_general_mat(SAM);

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 3. CHARACTERIZE OBSERVED DATA
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% 3.1. Organize observations
% =========================================================================

switch lower(simScope)
  case 'go'
    
    % Observed trial numbers
    fitObs.N   = [obs.nGo,obs.nGo];
    
    % Observed trial probabilities
    fitObs.P   = [obs.pGoCorr,obs.pGoComm];
    
    % Observed response times
    fitObs.rt  = [obs.rtGoCorr,obs.rtGoComm];
    
  case 'all'
    
    % Observed trial numbers
    fitObs.N   = [obs.nGo,obs.nGo,obs.nStop];
    
    % Observed trial probabilities
    fitObs.P   = [obs.pGoCorr,obs.pGoComm,obs.pStopFailure];
    
    % Observed response times
    fitObs.rt  = [obs.rtGoCorr,obs.rtGoComm,obs.rtStopFailure];
end

% 3.2. Compute response time bin statistics
% =========================================================================
[fitObs.rtQ, ...         % Quantiles
 fitObs.pDefect, ...     % Defective probabilities
 fitObs.f, ...           % Frequencies
 fitObs.pM] ...          % Probability masses
 = cellfun(@(a,b,c) sam_bin_data(a,b,c,cumProb,minBinSize), ...
 fitObs.rt, ...          % Response times
 num2cell(fitObs.P), ... % Response probabilities
 num2cell(fitObs.N), ... % Response frequencies
 'Uni',0);

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% 4. OPTIMIZE MODEL
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

% 4.1. Seed the random number generator
% =========================================================================
clear(char(simFun));  % Clear MEX function
rng(rngID);

% 4.2. Switch between solvers
% =========================================================================

switch lower(solver.type)
  % 4.2.1. Simplex
  % -----------------------------------------------------------------------
  case 'fminsearchbnd'

    [X, ...
     fVal, ...
     exitFlag, ...
     solverOutput] = fminsearchbnd(@(X0)  costFun(simGoal, ...
                                                  X0, ...
                                                  STATE, ...
                                                  obs, ...
                                                  prd, ...
                                                  SAM, ...
                                                  nSim, ...
                                                  simFun, ...
                                                  simScope, ...
                                                  VCor, ...
                                                  VIncor, ...
                                                  S, ...
                                                  terminate, ...
                                                  blockInput, ...
                                                  latInhib, ...
                                                  doPlot), ...
                                                  ...
                                                  X0, ...
                                                  LB, ...
                                                  UB, ...
                                                  solver.options);


  % 4.2.2. Differential evolution
  % -----------------------------------------------------------------------
  case 'de'
  
  % 4.2.3. Genetic algorithm
  % -----------------------------------------------------------------------
  case 'ga'

    nX = numel(LB);
    Aineq=[];bineq=[];Aeq=[];beq=[];

    [X, ...
     fVal, ...
     exitFlag, ...
     solverOutput, ...
     pop, ...
     cost] = ga(@(X)  costFun(simGoal, ...
                              X0, ...
                              STATE, ...
                              obs, ...
                              prd, ...
                              SAM, ...
                              nSim, ...
                              simFun, ...
                              simScope, ...
                              VCor, ...
                              VIncor, ...
                              S, ...
                              terminate, ...
                              blockInput, ...
                              latInhib, ...
                              doPlot), ...
                              ...
                              nX, ...
                              Aineq, ...
                              bineq, ...
                              Aeq, ...
                              beq, ...
                              LB, ...
                              UB, ...
                              [], ...
                              solver.options);

  % 4.2.4. Simulated annealing
  % -----------------------------------------------------------------------
  case 'sa'

    [X, ...
     fVal, ...
     exitFlag, ...
     solverOutput] = simulannealbnd(@(X)  costFun(simGoal, ...
                                                  X0, ...
                                                  STATE, ...
                                                  obs, ...
                                                  prd, ...
                                                  SAM, ...
                                                  nSim, ...
                                                  simFun, ...
                                                  simScope, ...
                                                  VCor, ...
                                                  VIncor, ...
                                                  S, ...
                                                  terminate, ...
                                                  blockInput, ...
                                                  latInhib, ...
                                                  doPlot), ...
                                                  ...
                                                  X0, ...
                                                  LB, ...
                                                  UB, ...
                                                  solver.options);
end

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
% 5. OUTPUT
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

SAM.estim.X             = X;
SAM.estim.fVal          = fVal;
SAM.estim.exitFlag      = exitFlag;
SAM.estim.solverOutput  = solverOutput;